// This is a mock authentication service
// In a real application, this would connect to your backend API
import Cookies from 'js-cookie';
// Custom event for auth state changes
const dispatchAuthEvent = () => {
    if (typeof window !== 'undefined') {
        window.dispatchEvent(new Event('auth_change'));
    }
};
// Mock user data - in a real app, this would come from your backend
const MOCK_USERS = [
    {
        id: '1',
        name: 'Admin User',
        email: 'admin@example.com',
        password: 'admin123',
        role: 'admin',
    },
    {
        id: '2',
        name: 'Test User',
        email: 'test@example.com',
        password: 'password123',
        role: 'user',
    },
];
export const login = async (credentials) => {
    // Simulate API call delay
    await new Promise((resolve) => setTimeout(resolve, 800));
    try {
        // Find user by email
        const user = MOCK_USERS.find((u) => u.email === credentials.email);
        // Check if user exists and password matches
        if (user && user.password === credentials.password) {
            // In a real app, the token would be generated by your backend
            const token = `mock-jwt-token-${Math.random().toString(36).substring(2, 15)}`;
            // Store token in cookie
            const cookieOptions = {
                expires: credentials.rememberMe
                    ? new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days
                    : undefined, // Session cookie if not remember me
                path: '/',
                secure: process.env.NODE_ENV === 'production',
                sameSite: 'strict',
            };
            // Set cookie that will be accessible by the middleware
            Cookies.set('auth_token', token, cookieOptions);
            // Also store in localStorage/sessionStorage as backup
            if (credentials.rememberMe) {
                localStorage.setItem('auth_token', token);
            }
            else {
                sessionStorage.setItem('auth_token', token);
            }
            // Dispatch auth change event
            dispatchAuthEvent();
            return {
                success: true,
                token,
                user: {
                    id: user.id,
                    name: user.name,
                    email: user.email,
                    role: user.role,
                },
            };
        }
        return {
            success: false,
            error: 'Invalid email or password',
        };
    }
    catch (error) {
        return {
            success: false,
            error: 'An error occurred during login',
        };
    }
};
export const logout = () => {
    // Remove auth token from cookie
    Cookies.remove('auth_token', { path: '/' });
    // Also remove from storage
    localStorage.removeItem('auth_token');
    sessionStorage.removeItem('auth_token');
    localStorage.removeItem('user_data');
    // Dispatch auth change event
    dispatchAuthEvent();
    // In a real app, you might also want to invalidate the token on the server
};
export const isAuthenticated = () => {
    if (typeof window === 'undefined') {
        return false;
    }
    // Check if user has a valid token in cookie
    const cookieToken = Cookies.get('auth_token');
    if (cookieToken)
        return true;
    // Fallback to localStorage/sessionStorage
    return (!!localStorage.getItem('auth_token') ||
        !!sessionStorage.getItem('auth_token'));
};
export const getAuthToken = () => {
    if (typeof window === 'undefined') {
        return null;
    }
    // Try to get token from cookie first
    const cookieToken = Cookies.get('auth_token');
    if (cookieToken)
        return cookieToken;
    // Fallback to localStorage/sessionStorage
    return (localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token'));
};
